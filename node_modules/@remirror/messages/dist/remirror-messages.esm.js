import '@lingui/core';

var COPY_LABEL =
/*i18n*/
{
  id: 'extension.command.copy.label',
  comment: 'Label for copy command.',
  message: 'Copy'
};
var COPY_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.copy.description',
  comment: 'Description for copy command.',
  message: 'Copy the selected text'
};
var CUT_LABEL =
/*i18n*/
{
  id: 'extension.command.cut.label',
  comment: 'Label for cut command.',
  message: 'Cut'
};
var CUT_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.cut.description',
  comment: 'Description for cut command.',
  message: 'Cut the selected text'
};
var PASTE_LABEL =
/*i18n*/
{
  id: 'extension.command.paste.label',
  comment: 'Label for paste command.',
  message: 'Paste'
};
var PASTE_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.paste.description',
  comment: 'Description for paste command.',
  message: 'Paste content into the editor'
};
var SELECT_ALL_LABEL =
/*i18n*/
{
  id: 'extension.command.select-all.label',
  comment: 'Label for select all command.',
  message: 'Select all'
};
var SELECT_ALL_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.select-all.description',
  comment: 'Description for select all command.',
  message: 'Select all content within the editor'
};

var coreMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  COPY_LABEL: COPY_LABEL,
  COPY_DESCRIPTION: COPY_DESCRIPTION,
  CUT_LABEL: CUT_LABEL,
  CUT_DESCRIPTION: CUT_DESCRIPTION,
  PASTE_LABEL: PASTE_LABEL,
  PASTE_DESCRIPTION: PASTE_DESCRIPTION,
  SELECT_ALL_LABEL: SELECT_ALL_LABEL,
  SELECT_ALL_DESCRIPTION: SELECT_ALL_DESCRIPTION
});

var ESCAPE_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.escape',
  comment: 'Label for escape key in shortcuts.',
  message: 'Enter'
};
var COMMAND_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.command',
  comment: 'Label for command key in shortcuts.',
  message: 'Command'
};
var CONTROL_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.control',
  comment: 'Label for control key in shortcuts.',
  message: 'Control'
};
var ENTER_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.enter',
  comment: 'Label for enter key in shortcuts.',
  message: 'Enter'
};
var SHIFT_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.shift',
  comment: 'Label for shift key in shortcuts.',
  message: 'Shift'
};
var ALT_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.alt',
  comment: 'Label for alt key in shortcuts.',
  message: 'Alt'
};
var CAPS_LOCK_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.capsLock',
  comment: 'Label for caps lock key in shortcuts.',
  message: 'Caps Lock'
};
var BACKSPACE_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.backspace',
  comment: 'Label for backspace key in shortcuts.',
  message: 'Backspace'
};
var TAB_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.tab',
  comment: 'Label for tab key in shortcuts.',
  message: 'Tab'
};
var SPACE_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.space',
  comment: 'Label for space key in shortcuts.',
  message: 'Space'
};
var DELETE_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.delete',
  comment: 'Label for delete key in shortcuts.',
  message: 'Delete'
};
var PAGE_UP_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.pageUp',
  comment: 'Label for page up key in shortcuts.',
  message: 'Page Up'
};
var PAGE_DOWN_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.pageDown',
  comment: 'Label for page down key in shortcuts.',
  message: 'Page Down'
};
var HOME_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.home',
  comment: 'Label for home key in shortcuts.',
  message: 'Home'
};
var END_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.end',
  comment: 'Label for end key in shortcuts.',
  message: 'End'
};
var ARROW_LEFT_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.arrowLeft',
  comment: 'Label for arrow left key in shortcuts.',
  message: 'Arrow Left'
};
var ARROW_RIGHT_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.arrowRight',
  comment: 'Label for arrow right key in shortcuts.',
  message: 'Arrow Right'
};
var ARROW_UP_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.arrowUp',
  comment: 'Label for arrow up key in shortcuts.',
  message: 'Arrow Up'
};
var ARROW_DOWN_KEY =
/*i18n*/
{
  id: 'keyboard.shortcut.arrowDown',
  comment: 'Label for arrowDown key in shortcuts.',
  message: 'Arrow Down'
};

var coreUtilsMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ESCAPE_KEY: ESCAPE_KEY,
  COMMAND_KEY: COMMAND_KEY,
  CONTROL_KEY: CONTROL_KEY,
  ENTER_KEY: ENTER_KEY,
  SHIFT_KEY: SHIFT_KEY,
  ALT_KEY: ALT_KEY,
  CAPS_LOCK_KEY: CAPS_LOCK_KEY,
  BACKSPACE_KEY: BACKSPACE_KEY,
  TAB_KEY: TAB_KEY,
  SPACE_KEY: SPACE_KEY,
  DELETE_KEY: DELETE_KEY,
  PAGE_UP_KEY: PAGE_UP_KEY,
  PAGE_DOWN_KEY: PAGE_DOWN_KEY,
  HOME_KEY: HOME_KEY,
  END_KEY: END_KEY,
  ARROW_LEFT_KEY: ARROW_LEFT_KEY,
  ARROW_RIGHT_KEY: ARROW_RIGHT_KEY,
  ARROW_UP_KEY: ARROW_UP_KEY,
  ARROW_DOWN_KEY: ARROW_DOWN_KEY
});

var ADD_ANNOTATION =
/*i18n*/
{
  id: 'extension.command.add-annotation.label',
  comment: 'Label for adding an annotation.',
  message: 'Add annotation'
};
var UPDATE_ANNOTATION =
/*i18n*/
{
  id: 'extension.command.update-annotation.label',
  comment: 'Label for updating an annotation.',
  message: 'Update annotation'
};
var REMOVE_ANNOTATION =
/*i18n*/
{
  id: 'extension.command.remove-annotation.label',
  comment: 'Label for removing an annotation.',
  message: 'Remove annotation'
};

var extensionAnnotationMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ADD_ANNOTATION: ADD_ANNOTATION,
  UPDATE_ANNOTATION: UPDATE_ANNOTATION,
  REMOVE_ANNOTATION: REMOVE_ANNOTATION
});

var LABEL$e =
/*i18n*/
{
  id: 'extension.command.set-text-direction.label',
  comment: 'Label for setting the text direction.',
  message: "{dir, select, ltr {Left-To-Right}\nrtl {Right-To-Left}\nother {Reset Direction}}"
};
var DESCRIPTION$b =
/*i18n*/
{
  id: 'extension.command.set-text-direction.description',
  comment: 'Description for setting the text direction.',
  message: "{dir, select, ltr {Set the text direction from left to right}\nrtl {Set the text direction from right to left}\nother {Reset text direction}}"
};

var extensionBidiMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$e,
  DESCRIPTION: DESCRIPTION$b
});

var LABEL$d =
/*i18n*/
{
  id: 'extension.command.toggle-blockquote.label',
  comment: 'Label for blockquote formatting command.',
  message: 'Blockquote'
};
var DESCRIPTION$a =
/*i18n*/
{
  id: 'extension.command.toggle-blockquote.description',
  comment: 'Description for blockquote formatting command.',
  message: 'Add blockquote formatting to the selected text'
};

var extensionBlockquoteMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$d,
  DESCRIPTION: DESCRIPTION$a
});

var LABEL$c =
/*i18n*/
{
  id: 'extension.command.toggle-bold.label',
  comment: 'Label for bold formatting command.',
  message: 'Bold'
};
var DESCRIPTION$9 =
/*i18n*/
{
  id: 'extension.command.toggle-bold.description',
  comment: 'Description for bold formatting command.',
  message: 'Add bold formatting to the selected text'
};

var extensionBoldMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$c,
  DESCRIPTION: DESCRIPTION$9
});

var LABEL$b =
/*i18n*/
{
  id: 'extension.command.toggle-callout.label',
  comment: 'Label for callout command with support for callout types.',
  message: "{type, select, info {Information Callout}\nwarning {Warning Callout}\nerror {Error Callout}\nsuccess {Success Callout}\nother {Callout}}"
};
var DESCRIPTION$8 =
/*i18n*/
{
  id: 'extension.command.toggle-callout.description',
  comment: 'Description of the callout command with support for callout types.',
  message: "{type, select, info {Create an information callout block}\nwarning {Create a warning callout block}\nerror {Create an error callout block}\nsuccess {Create a success callout block}\nother {Create a callout block}}"
};

var extensionCalloutMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$b,
  DESCRIPTION: DESCRIPTION$8
});

var LABEL$a =
/*i18n*/
{
  id: 'extension.command.toggle-code-block.label',
  comment: 'Label for the code block command.',
  message: 'Codeblock'
};
var DESCRIPTION$7 =
/*i18n*/
{
  id: 'extension.command.toggle-code-block.description',
  comment: 'Description for the code block command.',
  message: 'Add a code block'
};

var extensionCodeBlockMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$a,
  DESCRIPTION: DESCRIPTION$7
});

var LABEL$9 =
/*i18n*/
{
  id: 'extension.command.toggle-code.label',
  comment: 'Label for the inline code formatting.',
  message: 'Code'
};
var DESCRIPTION$6 =
/*i18n*/
{
  id: 'extension.command.toggle-code.description',
  comment: 'Description for the inline code formatting command.',
  message: 'Add inline code formatting to the selected text'
};

var extensionCodeMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$9,
  DESCRIPTION: DESCRIPTION$6
});

var LABEL$8 =
/*i18n*/
{
  id: 'extension.command.toggle-columns.label',
  comment: 'Label for columns command with support for number of columns counts.',
  message: "{count, select, 2 {Two Column Block}\n3 {Three Column Block}\n4 {Four Column Block}\nother {Multi Column Block}}"
};
var DESCRIPTION$5 =
/*i18n*/
{
  id: 'extension.command.toggle-columns.description',
  comment: 'Description of the columns command with support for number of columns counts.',
  message: "{count, select, 2 {Split the block into two columns}\n3 {Split the current block into three columns}\n4 {Split the current block into four columns}\nother {Split the current block into multiple columns}}"
};

var extensionColumnsMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$8,
  DESCRIPTION: DESCRIPTION$5
});

var INSERT_EMOJI_LABEL =
/*i18n*/
{
  id: 'extension.command.insert-emoji.label',
  comment: 'Label for inserting an emoji.',
  message: 'Insert Emoji'
};

var extensionEmojiMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  INSERT_EMOJI_LABEL: INSERT_EMOJI_LABEL
});

var SET_LABEL$1 =
/*i18n*/
{
  id: 'extension.command.set-font-size.label',
  comment: 'Label for adding a font size.',
  message: 'Font size'
};
var SET_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.set-font-size.description',
  comment: 'Description for adding a font size.',
  message: 'Set the font size for the selected text.'
};
var INCREASE_LABEL =
/*i18n*/
{
  id: 'extension.command.increase-font-size.label',
  comment: 'Label for increasing the font size.',
  message: 'Increase'
};
var INCREASE_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.increase-font-size.description',
  comment: 'Description for increasing the font size.',
  message: 'Increase the font size'
};
var DECREASE_LABEL =
/*i18n*/
{
  id: 'extension.command.decrease-font-size.label',
  comment: 'Label for decreasing the font size.',
  message: 'Decrease'
};
var DECREASE_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.decrease-font-size.description',
  comment: 'Description for decreasing the font size.',
  message: 'Decrease the font size.'
};

var extensionFontSizeMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SET_LABEL: SET_LABEL$1,
  SET_DESCRIPTION: SET_DESCRIPTION,
  INCREASE_LABEL: INCREASE_LABEL,
  INCREASE_DESCRIPTION: INCREASE_DESCRIPTION,
  DECREASE_LABEL: DECREASE_LABEL,
  DECREASE_DESCRIPTION: DECREASE_DESCRIPTION
});

var LABEL$7 =
/*i18n*/
{
  id: 'extension.command.toggle-heading.label',
  comment: 'Label for heading command with support for levels.',
  message: "{level, select, 1 {Heading 1}\n2 {Heading 2}\n3 {Heading 3}\n4 {Heading 4}\n5 {Heading 5}\n6 {Heading 6}\nother {Heading}}"
};

var extensionHeadingMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$7
});

var UNDO_LABEL =
/*i18n*/
{
  id: 'extension.command.undo.label',
  comment: 'Label for undo.',
  message: 'Undo'
};
var UNDO_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.undo.description',
  comment: 'Description for undo.',
  message: 'Undo the most recent action'
};
var REDO_LABEL =
/*i18n*/
{
  id: 'extension.command.redo.label',
  comment: 'Label for redo.',
  message: 'Redo'
};
var REDO_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.redo.description',
  comment: 'Description for redo.',
  message: 'Redo the most recent action'
};

var extensionHistoryMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  UNDO_LABEL: UNDO_LABEL,
  UNDO_DESCRIPTION: UNDO_DESCRIPTION,
  REDO_LABEL: REDO_LABEL,
  REDO_DESCRIPTION: REDO_DESCRIPTION
});

var LABEL$6 =
/*i18n*/
{
  id: 'extension.command.toggle-italic.label',
  comment: 'Label for italic formatting command.',
  message: 'Italic'
};
var DESCRIPTION$4 =
/*i18n*/
{
  id: 'extension.command.toggle-italic.description',
  comment: 'Description for italic formatting command.',
  message: 'Italicize the selected text'
};

var extensionItalicMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$6,
  DESCRIPTION: DESCRIPTION$4
});

var ORDERED_LIST_LABEL =
/*i18n*/
{
  id: 'extension.command.toggle-ordered-list.label',
  comment: 'Label for inserting an ordered list into the editor.',
  message: 'Ordered list'
};
var BULLET_LIST_LABEL =
/*i18n*/
{
  id: 'extension.command.toggle-bullet-list.description',
  comment: 'Description for inserting a bullet list into the editor.',
  message: 'Bulleted list'
};
var TASK_LIST_LABEL =
/*i18n*/
{
  id: 'extension.command.toggle-task-list.description',
  comment: 'Description for inserting a task list into the editor.',
  message: 'Tasked list'
};

var extensionListMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ORDERED_LIST_LABEL: ORDERED_LIST_LABEL,
  BULLET_LIST_LABEL: BULLET_LIST_LABEL,
  TASK_LIST_LABEL: TASK_LIST_LABEL
});

var INCREASE_INDENT_LABEL =
/*i18n*/
{
  id: 'extension.command.increase-indent.label',
  comment: 'Label for increasing the indentation level.',
  message: 'Increase indentation'
};
var DECREASE_INDENT_LABEL =
/*i18n*/
{
  id: 'extension.command.decrease-indent.label',
  comment: 'Label for decreasing the indentation level of the current node block.',
  message: 'Decrease indentation'
};
var CENTER_ALIGN_LABEL =
/*i18n*/
{
  id: 'extension.command.center-align.label',
  comment: 'Center align the text in the current node.',
  message: 'Center align'
};
var JUSTIFY_ALIGN_LABEL =
/*i18n*/
{
  id: 'extension.command.justify-align.label',
  comment: 'Justify the alignment of the selected nodes.',
  message: 'Justify'
};
var RIGHT_ALIGN_LABEL =
/*i18n*/
{
  id: 'extension.command.right-align.label',
  comment: 'Right align the selected nodes.',
  message: 'Right align'
};
var LEFT_ALIGN_LABEL =
/*i18n*/
{
  id: 'extension.command.left-align.label',
  comment: 'Left align the selected nodes.',
  message: 'Left align'
};

var extensionNodeFormattingMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  INCREASE_INDENT_LABEL: INCREASE_INDENT_LABEL,
  DECREASE_INDENT_LABEL: DECREASE_INDENT_LABEL,
  CENTER_ALIGN_LABEL: CENTER_ALIGN_LABEL,
  JUSTIFY_ALIGN_LABEL: JUSTIFY_ALIGN_LABEL,
  RIGHT_ALIGN_LABEL: RIGHT_ALIGN_LABEL,
  LEFT_ALIGN_LABEL: LEFT_ALIGN_LABEL
});

var INSERT_LABEL =
/*i18n*/
{
  id: 'extension.command.insert-paragraph.label',
  comment: 'Label for inserting a paragraph.',
  message: 'Insert Paragraph'
};
var INSERT_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.insert-paragraph.description',
  comment: 'Description for inserting a paragraph.',
  message: 'Insert a new paragraph'
};
var CONVERT_LABEL =
/*i18n*/
{
  id: 'extension.command.convert-paragraph.label',
  comment: 'Label for converting the current node into a paragraph.',
  message: 'Convert Paragraph'
};
var CONVERT_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.convert-paragraph.description',
  comment: 'Description for converting a paragraph.',
  message: 'Convert current block into a paragraph block.'
};

var extensionParagraphMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  INSERT_LABEL: INSERT_LABEL,
  INSERT_DESCRIPTION: INSERT_DESCRIPTION,
  CONVERT_LABEL: CONVERT_LABEL,
  CONVERT_DESCRIPTION: CONVERT_DESCRIPTION
});

var LABEL$5 =
/*i18n*/
{
  id: 'extension.command.toggle-strike.label',
  comment: 'Label for strike formatting command.',
  message: 'Strikethrough'
};
var DESCRIPTION$3 =
/*i18n*/
{
  id: 'extension.command.toggle-strike.description',
  comment: 'Description for strike formatting command.',
  message: 'Strikethrough the selected text'
};

var extensionStrikeMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$5,
  DESCRIPTION: DESCRIPTION$3
});

var LABEL$4 =
/*i18n*/
{
  id: 'extension.command.toggle-subscript.label',
  comment: 'Label for toggling a subscript.',
  message: 'Subscript'
};

var extensionSubMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$4
});

var LABEL$3 =
/*i18n*/
{
  id: 'extension.command.toggle-superscript.label',
  comment: 'Label for toggling a superscript.',
  message: 'Superscript'
};

var extensionSupMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$3
});

var CREATE_COMMAND_LABEL =
/*i18n*/
{
  id: 'extension.command.create-table.label',
  comment: 'Label for creating a table',
  message: 'Create table'
};
var CREATE_COMMAND_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.create-table.description',
  comment: 'Description for creating a table',
  message: 'Create a table with set number of rows and columns.'
};
/**
 * Takes a `{ count: number }` value to denote the number of columns.
 */

var COLUMN_COUNT =
/*i18n*/
{
  id: 'extension.table.column_count',
  comment: 'The number of columns',
  message: '{count, plural, one {# column} other {# columns}}'
};
/**
 * Takes a `{ count: number }` value to denote the number of rows.
 */

var ROW_COUNT =
/*i18n*/
{
  id: 'extension.table.row_count',
  comment: 'The number of rows',
  message: '{count, plural, one {# row} other {# rows}}'
};

var extensionTablesMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CREATE_COMMAND_LABEL: CREATE_COMMAND_LABEL,
  CREATE_COMMAND_DESCRIPTION: CREATE_COMMAND_DESCRIPTION,
  COLUMN_COUNT: COLUMN_COUNT,
  ROW_COUNT: ROW_COUNT
});

var TOGGLE_LABEL =
/*i18n*/
{
  id: 'extension.command.toggle-upper-case.label',
  comment: 'Label for toggling between upper and lower case.',
  message: "{case, select, upper {Uppercase}\nlower {Lowercase}\ncapitalize {Sentence case}\nsmallCaps {Small caps}\nother {Text case}}"
};
var SET_LABEL =
/*i18n*/
{
  id: 'extension.command.set-casing.label',
  comment: 'Label for setting the case.',
  message: 'Set text case'
};

var extensionTextCaseMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TOGGLE_LABEL: TOGGLE_LABEL,
  SET_LABEL: SET_LABEL
});

var SET_COLOR_LABEL =
/*i18n*/
{
  id: 'extension.command.set-text-color.label',
  comment: 'Label for color formatting command.',
  message: 'Text color'
};
var SET_COLOR_DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.set-text-color.description',
  comment: 'Description for color formatting command.',
  message: 'Set the text color for the selected text.'
};
var TRANSPARENT =
/*i18n*/
{
  id: 'ui.text-color.transparent',
  comment: 'Transparent color label.',
  message: 'Transparent'
};
var WHITE =
/*i18n*/
{
  id: 'ui.text-color.white',
  comment: 'White color.',
  message: 'White'
};
var BLACK =
/*i18n*/
{
  id: 'ui.text-color.black',
  comment: 'Black color.',
  message: 'Black'
};
var GRAY =
/*i18n*/
{
  id: 'ui.text-color.gray',
  comment: 'Gray color.',
  message: "Gray"
};
var GRAY_HUE =
/*i18n*/
{
  id: 'ui.text-color.gray.hue',
  comment: 'Gray color hues.',
  message: "Gray {hue}"
};
var RED =
/*i18n*/
{
  id: 'ui.text-color.red',
  comment: 'Red color.',
  message: "Red"
};
var RED_HUE =
/*i18n*/
{
  id: 'ui.text-color.red.hue',
  comment: 'Red color hues.',
  message: "Red {hue}"
};
var PINK =
/*i18n*/
{
  id: 'ui.text-color.pink',
  comment: 'Pink color.',
  message: "Pink"
};
var PINK_HUE =
/*i18n*/
{
  id: 'ui.text-color.pink.hue',
  comment: 'Pink color hues.',
  message: "Pink {hue}"
};
var GRAPE =
/*i18n*/
{
  id: 'ui.text-color.grape',
  comment: 'Grape color.',
  message: "Grape"
};
var GRAPE_HUE =
/*i18n*/
{
  id: 'ui.text-color.grape.hue',
  comment: 'Grape color hues.',
  message: "Grape {hue}"
};
var VIOLET =
/*i18n*/
{
  id: 'ui.text-color.violet',
  comment: 'Violet color.',
  message: "Violet"
};
var VIOLET_HUE =
/*i18n*/
{
  id: 'ui.text-color.violet.hue',
  comment: 'Violet color hues.',
  message: "Violet {hue}"
};
var INDIGO =
/*i18n*/
{
  id: 'ui.text-color.indigo',
  comment: 'Indigo color.',
  message: "Indigo"
};
var INDIGO_HUE =
/*i18n*/
{
  id: 'ui.text-color.indigo.hue',
  comment: 'Indigo color hues.',
  message: "Indigo {hue}"
};
var BLUE =
/*i18n*/
{
  id: 'ui.text-color.blue',
  comment: 'Blue color.',
  message: "Blue"
};
var BLUE_HUE =
/*i18n*/
{
  id: 'ui.text-color.blue.hue',
  comment: 'Blue color hues.',
  message: "Blue {hue}"
};
var CYAN =
/*i18n*/
{
  id: 'ui.text-color.cyan',
  comment: 'Cyan color.',
  message: "Cyan"
};
var CYAN_HUE =
/*i18n*/
{
  id: 'ui.text-color.cyan.hue',
  comment: 'Cyan color hues.',
  message: "Cyan {hue}"
};
var TEAL =
/*i18n*/
{
  id: 'ui.text-color.teal',
  comment: 'Teal color.',
  message: "Teal"
};
var TEAL_HUE =
/*i18n*/
{
  id: 'ui.text-color.teal.hue',
  comment: 'Teal color hues.',
  message: "Teal {hue}"
};
var GREEN =
/*i18n*/
{
  id: 'ui.text-color.green',
  comment: 'Green color.',
  message: "Green"
};
var GREEN_HUE =
/*i18n*/
{
  id: 'ui.text-color.green.hue',
  comment: 'Green color hues.',
  message: "Green {hue}"
};
var LIME =
/*i18n*/
{
  id: 'ui.text-color.lime',
  comment: 'Lime color.',
  message: "Lime"
};
var LIME_HUE =
/*i18n*/
{
  id: 'ui.text-color.lime.hue',
  comment: 'Lime color hues.',
  message: "Lime {hue}"
};
var YELLOW =
/*i18n*/
{
  id: 'ui.text-color.yellow',
  comment: 'Yellow color.',
  message: "Yellow"
};
var YELLOW_HUE =
/*i18n*/
{
  id: 'ui.text-color.yellow.hue',
  comment: 'Yellow color hues.',
  message: "Yellow {hue}"
};
var ORANGE =
/*i18n*/
{
  id: 'ui.text-color.orange',
  comment: 'Orange color.',
  message: "Orange"
};
var ORANGE_HUE =
/*i18n*/
{
  id: 'ui.text-color.orange.hue',
  comment: 'Orange color hues.',
  message: "Orange {hue}"
};

var extensionTextColorMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SET_COLOR_LABEL: SET_COLOR_LABEL,
  SET_COLOR_DESCRIPTION: SET_COLOR_DESCRIPTION,
  TRANSPARENT: TRANSPARENT,
  WHITE: WHITE,
  BLACK: BLACK,
  GRAY: GRAY,
  GRAY_HUE: GRAY_HUE,
  RED: RED,
  RED_HUE: RED_HUE,
  PINK: PINK,
  PINK_HUE: PINK_HUE,
  GRAPE: GRAPE,
  GRAPE_HUE: GRAPE_HUE,
  VIOLET: VIOLET,
  VIOLET_HUE: VIOLET_HUE,
  INDIGO: INDIGO,
  INDIGO_HUE: INDIGO_HUE,
  BLUE: BLUE,
  BLUE_HUE: BLUE_HUE,
  CYAN: CYAN,
  CYAN_HUE: CYAN_HUE,
  TEAL: TEAL,
  TEAL_HUE: TEAL_HUE,
  GREEN: GREEN,
  GREEN_HUE: GREEN_HUE,
  LIME: LIME,
  LIME_HUE: LIME_HUE,
  YELLOW: YELLOW,
  YELLOW_HUE: YELLOW_HUE,
  ORANGE: ORANGE,
  ORANGE_HUE: ORANGE_HUE
});

var LABEL$2 =
/*i18n*/
{
  id: 'extension.command.set-text-highlight.label',
  comment: 'Label for adding a text highlight.',
  message: 'Text highlight'
};
var DESCRIPTION$2 =
/*i18n*/
{
  id: 'extension.command.set-text-highlight.description',
  comment: 'Description for adding a text highlight.',
  message: 'Set the text highlight color for the selected text.'
};

var extensionTextHighlightMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$2,
  DESCRIPTION: DESCRIPTION$2
});

var LABEL$1 =
/*i18n*/
{
  id: 'extension.command.toggle-underline.label',
  comment: 'Label for underline formatting command.',
  message: 'Underline'
};
var DESCRIPTION$1 =
/*i18n*/
{
  id: 'extension.command.toggle-underline.description',
  comment: 'Description for underline formatting command.',
  message: 'Underline the selected text'
};

var extensionUnderlineMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL$1,
  DESCRIPTION: DESCRIPTION$1
});

var LABEL =
/*i18n*/
{
  id: 'extension.command.toggle-whitespace.label',
  comment: 'Label for displaying whitespace characters.',
  message: 'Toggle Whitespace'
};
var DESCRIPTION =
/*i18n*/
{
  id: 'extension.command.toggle-whitespace.description',
  comment: 'Description for displaying whitespace characters.',
  message: 'Show hidden whitespace characters in your editor.'
};

var extensionWhitespaceMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  LABEL: LABEL,
  DESCRIPTION: DESCRIPTION
});

var NO_ITEMS_AVAILABLE =
/*i18n*/
{
  id: 'react-components.mention-atom-component.zero-items',
  comment: 'Shown when no popup items are available',
  message: 'No items available'
};

var reactComponentsMessages = /*#__PURE__*/Object.freeze({
  __proto__: null,
  NO_ITEMS_AVAILABLE: NO_ITEMS_AVAILABLE
});

export { coreMessages as CoreMessages, coreUtilsMessages as CoreUtilsMessages, extensionAnnotationMessages as ExtensionAnnotationMessages, extensionBidiMessages as ExtensionBidiMessages, extensionBlockquoteMessages as ExtensionBlockquoteMessages, extensionBoldMessages as ExtensionBoldMessages, extensionCalloutMessages as ExtensionCalloutMessages, extensionCodeBlockMessages as ExtensionCodeBlockMessages, extensionCodeMessages as ExtensionCodeMessages, extensionColumnsMessages as ExtensionColumnsMessages, extensionEmojiMessages as ExtensionEmojiMessages, extensionFontSizeMessages as ExtensionFontSizeMessages, extensionHeadingMessages as ExtensionHeadingMessages, extensionHistoryMessages as ExtensionHistoryMessages, extensionItalicMessages as ExtensionItalicMessages, extensionListMessages as ExtensionListMessages, extensionNodeFormattingMessages as ExtensionNodeFormattingMessages, extensionParagraphMessages as ExtensionParagraphMessages, extensionStrikeMessages as ExtensionStrikeMessages, extensionSubMessages as ExtensionSubMessages, extensionSupMessages as ExtensionSupMessages, extensionTablesMessages as ExtensionTablesMessages, extensionTextCaseMessages as ExtensionTextCaseMessages, extensionTextColorMessages as ExtensionTextColorMessages, extensionTextHighlightMessages as ExtensionTextHighlightMessages, extensionUnderlineMessages as ExtensionUnderlineMessages, extensionWhitespaceMessages as ExtensionWhitespaceMessages, reactComponentsMessages as ReactComponentMessages };
