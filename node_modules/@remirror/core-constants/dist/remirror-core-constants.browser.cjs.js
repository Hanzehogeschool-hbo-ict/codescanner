'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * The css class added to a node that is selected.
 */
var SELECTED_NODE_CLASS_NAME = 'ProseMirror-selectednode';
/**
 * The css selector for a selected node.
 */

var SELECTED_NODE_CLASS_SELECTOR = ".".concat(SELECTED_NODE_CLASS_NAME);
/**
 * ProseMirror uses the Unicode Character 'OBJECT REPLACEMENT CHARACTER'
 * (U+FFFC) as text representation for leaf nodes, i.e. nodes that don't have
 * any content or text property (e.g. hardBreak, emoji, mention, rule) It was
 * introduced because of https://github.com/ProseMirror/prosemirror/issues/262
 * This can be used in an input rule regex to be able to include or exclude such
 * nodes.
 */

var LEAF_NODE_REPLACING_CHARACTER = "\uFFFC";
/**
 * The null character.
 *
 * See {@link https://stackoverflow.com/a/6380172}
 */

var NULL_CHARACTER = '\0';
/**
 * Indicates that a state update was caused by an override and not via
 * transactions or user commands.
 *
 * This is the case when `setContent` is called and for all `controlled` updates
 * within a `react` editor instance.
 */

var STATE_OVERRIDE = '__state_override__';
/**
 * The global name for the module exported by the remirror webview bundle.
 */

var REMIRROR_WEBVIEW_NAME = '$$__REMIRROR_WEBVIEW_BUNDLE__$$';
/**
 * A character useful for separating inline nodes.
 *
 * @remarks
 * Typically used in decorations as follows.
 *
 * ```ts
 * document.createTextNode(ZERO_WIDTH_SPACE_CHAR);
 * ```
 *
 * This produces the html entity '8203'
 */

var ZERO_WIDTH_SPACE_CHAR = "\u200B";
/**
 * The non breaking space character.
 */

var NON_BREAKING_SPACE_CHAR = "\xA0";
/**
 * A default empty object node. Useful for resetting the content of a
 * prosemirror document.
 */

var EMPTY_PARAGRAPH_NODE = {
  type: 'doc',
  content: [{
    type: 'paragraph'
  }]
};
var EMPTY_NODE = {
  type: 'doc',
  content: []
};
/**
 * The type for the extension tags..
 */

/**
 * A method for updating the extension tags.
 *
 * ```tsx
 * import { ExtensionTag, mutateTag } from 'remirror';
 *
 * mutateTag((tag) => {
 *   tag.SuperCustom = 'superCustom';
 * });
 *
 * declare global {
 *   namespace Remirror {
 *     interface ExtensionTag {
 *       SuperCustom: 'superCustom';
 *     }
 *   }
 * }
 *
 *
 * log(ExtensionTag.SuperCustom); // This is fine ✅
 * log(ExtensionTag.NotDefined); // This will throw ❌
 * ```
 */
function mutateTag(mutator) {
  mutator(BaseExtensionTag);
}
var BaseExtensionTag = {
  /**
   * Describes a node that can be used as the last node of a document and
   * doesn't need to have anything else rendered after itself.
   *
   * @remarks
   *
   * e.g. `paragraph`
   */
  LastNodeCompatible: 'lastNodeCompatible',

  /**
   * A mark that is used to change the formatting of the node it wraps.
   *
   * @remarks
   *
   * e.g. `bold`, `italic`
   */
  FormattingMark: 'formattingMark',

  /**
   * A node that formats text in a non-standard way.
   *
   * @remarks
   *
   * e.g. `codeBlock`, `heading`, `blockquote`
   */
  FormattingNode: 'formattingNode',

  /**
   * Identifies a node which has problems with cursor navigation.
   *
   * @remarks
   *
   * When this tag is added to an extension this will be picked up by
   * behavioural extensions such as the NodeCursorExtension which makes hard to
   * reach nodes reachable using keyboard arrows.
   */
  NodeCursor: 'nodeCursor',

  /**
   * Mark group for font styling (e.g. bold, italic, underline, superscript).
   */
  FontStyle: 'fontStyle',

  /**
   * Mark groups for links.
   */
  Link: 'link',

  /**
   * Mark groups for colors (text-color, background-color, etc).
   */
  Color: 'color',

  /**
   * Mark group for alignment.
   */
  Alignment: 'alignment',

  /**
   * Mark group for indentation.
   */
  Indentation: 'indentation',

  /**
   * Extension which affect the behaviour of the content. Can be nodes marks or
   * plain.
   */
  Behavior: 'behavior',

  /**
   * Marks and nodes which contain code.
   */
  Code: 'code',

  /**
   * Whether this node is an inline node.
   *
   * - `text` is an inline node, but `paragraph` is a block node.
   */
  InlineNode: 'inline',

  /**
   * This is a node that can contain list items.
   */
  ListContainerNode: 'listContainer',

  /**
   * Tags the extension as a list item node which can be contained by
   * [[`ExtensionTag.ListNode`]].
   */
  ListItemNode: 'listItemNode',

  /**
   * Sets this as a block level node.
   */
  Block: 'block',

  /**
   * @deprecate use `ExtensionTags.Block` instead.
   */
  BlockNode: 'block',

  /**
   * Set this as a text block
   */
  TextBlock: 'textBlock',

  /**
   * A tag that excludes this from input rules.
   */
  ExcludeInputRules: 'excludeFromInputRules',

  /**
   * A mark or node that can't  be exited when at the end and beginning of the
   * document with an arrow key or backspace key.
   */
  PreventExits: 'preventsExits',

  /**
   * Represents a media compatible node.
   */
  Media: 'media'
};
/**
 * These are the default supported tag strings which help categorize different
 * behaviors that extensions can exhibit.
 *
 * @remarks
 *
 * Any extension can register itself with multiple such behaviors and these
 * categorizations can be used by other extensions when running commands and
 * updating the document.
 */

var ExtensionTag = BaseExtensionTag;
/**
 * The string values which can be used as extension tags.
 */

/**
 * The identifier key which is used to check objects for whether they are a
 * certain type.
 *
 * @remarks
 *
 * Just pretend you don't know this exists.
 *
 * @internal
 */
var __INTERNAL_REMIRROR_IDENTIFIER_KEY__ = Symbol.for('__remirror__');
/**
 * These constants are stored on the `REMIRROR_IDENTIFIER_KEY` property of
 * `remirror` related constructors and instances in order to identify them as
 * being internal to Remirror.
 *
 * @remarks
 *
 * This helps to prevent issues around check types via `instanceof` which can
 * lead to false negatives.
 *
 * @internal
 */

exports.RemirrorIdentifier = void 0;
/**
 * The priority of extension which determines what order it is loaded into the
 * editor.
 *
 * @remarks
 *
 * Higher priority extension (higher numberic value) will ensure the extension
 * has a higher preference in your editor. In the case where you load two
 * identical extensions into your editor (same name, or same constructor), the
 * extension with the  higher priority is the one that will be loaded.
 *
 * The higher the numeric value the higher the priority. The priority can also
 * be passed a number but naming things in this `enum` should help provide some
 * context to the numbers.
 *
 * By default all extensions are created with a `ExtensionPriority.Default`.
 */

(function (RemirrorIdentifier) {
  RemirrorIdentifier["PlainExtension"] = "RemirrorPlainExtension";
  RemirrorIdentifier["NodeExtension"] = "RemirrorNodeExtension";
  RemirrorIdentifier["MarkExtension"] = "RemirrorMarkExtension";
  RemirrorIdentifier["PlainExtensionConstructor"] = "RemirrorPlainExtensionConstructor";
  RemirrorIdentifier["NodeExtensionConstructor"] = "RemirrorNodeExtensionConstructor";
  RemirrorIdentifier["MarkExtensionConstructor"] = "RemirrorMarkExtensionConstructor";
  RemirrorIdentifier["Manager"] = "RemirrorManager";
  RemirrorIdentifier["Preset"] = "RemirrorPreset";
  RemirrorIdentifier["PresetConstructor"] = "RemirrorPresetConstructor";
})(exports.RemirrorIdentifier || (exports.RemirrorIdentifier = {}));

exports.ExtensionPriority = void 0;
/**
 * Identifies the stage the extension manager is at.
 */

(function (ExtensionPriority) {
  ExtensionPriority[ExtensionPriority["Critical"] = 1000000] = "Critical";
  ExtensionPriority[ExtensionPriority["Highest"] = 100000] = "Highest";
  ExtensionPriority[ExtensionPriority["High"] = 10000] = "High";
  ExtensionPriority[ExtensionPriority["Medium"] = 1000] = "Medium";
  ExtensionPriority[ExtensionPriority["Default"] = 100] = "Default";
  ExtensionPriority[ExtensionPriority["Low"] = 10] = "Low";
  ExtensionPriority[ExtensionPriority["Lowest"] = 0] = "Lowest";
})(exports.ExtensionPriority || (exports.ExtensionPriority = {}));

exports.ManagerPhase = void 0;
/**
 * The named shortcuts that can be used to update multiple commands.
 */

(function (ManagerPhase) {
  ManagerPhase[ManagerPhase["None"] = 0] = "None";
  ManagerPhase[ManagerPhase["Create"] = 1] = "Create";
  ManagerPhase[ManagerPhase["EditorView"] = 2] = "EditorView";
  ManagerPhase[ManagerPhase["Runtime"] = 3] = "Runtime";
  ManagerPhase[ManagerPhase["Destroy"] = 4] = "Destroy";
})(exports.ManagerPhase || (exports.ManagerPhase = {}));

exports.NamedShortcut = void 0;
/**
 * Helpful empty array for use when a default array value is needed.
 *
 * DO NOT MUTATE!
 */

(function (NamedShortcut) {
  NamedShortcut["Undo"] = "_|undo|_";
  NamedShortcut["Redo"] = "_|redo|_";
  NamedShortcut["Bold"] = "_|bold|_";
  NamedShortcut["Italic"] = "_|italic|_";
  NamedShortcut["Underline"] = "_|underline|_";
  NamedShortcut["Strike"] = "_|strike|_";
  NamedShortcut["Code"] = "_|code|_";
  NamedShortcut["Paragraph"] = "_|paragraph|_";
  NamedShortcut["H1"] = "_|h1|_";
  NamedShortcut["H2"] = "_|h2|_";
  NamedShortcut["H3"] = "_|h3|_";
  NamedShortcut["H4"] = "_|h4|_";
  NamedShortcut["H5"] = "_|h5|_";
  NamedShortcut["H6"] = "_|h6|_";
  NamedShortcut["TaskList"] = "_|task|_";
  NamedShortcut["BulletList"] = "_|bullet|_";
  NamedShortcut["OrderedList"] = "_|number|_";
  NamedShortcut["Quote"] = "_|quote|_";
  NamedShortcut["Divider"] = "_|divider|_";
  NamedShortcut["Codeblock"] = "_|codeblock|_";
  NamedShortcut["ClearFormatting"] = "_|clear|_";
  NamedShortcut["Superscript"] = "_|sup|_";
  NamedShortcut["Subscript"] = "_|sub|_";
  NamedShortcut["LeftAlignment"] = "_|left-align|_";
  NamedShortcut["CenterAlignment"] = "_|center-align|_";
  NamedShortcut["RightAlignment"] = "_|right-align|_";
  NamedShortcut["JustifyAlignment"] = "_|justify-align|_";
  NamedShortcut["InsertLink"] = "_|link|_";
  NamedShortcut["Find"] = "_|find|_";
  NamedShortcut["FindBackwards"] = "_|find-backwards|_";
  NamedShortcut["FindReplace"] = "_|find-replace|_";
  NamedShortcut["AddFootnote"] = "_|footnote|_";
  NamedShortcut["AddComment"] = "_|comment|_";
  NamedShortcut["ContextMenu"] = "_|context-menu|_";
  NamedShortcut["IncreaseFontSize"] = "_|inc-font-size|_";
  NamedShortcut["DecreaseFontSize"] = "_|dec-font-size|_";
  NamedShortcut["IncreaseIndent"] = "_|indent|_";
  NamedShortcut["DecreaseIndent"] = "_|dedent|_";
  NamedShortcut["Shortcuts"] = "_|shortcuts|_";
  NamedShortcut["Copy"] = "_|copy|_";
  NamedShortcut["Cut"] = "_|cut|_";
  NamedShortcut["Paste"] = "_|paste|_";
  NamedShortcut["PastePlain"] = "_|paste-plain|_";
  NamedShortcut["SelectAll"] = "_|select-all|_";
  NamedShortcut["Format"] = "_|format|_";
})(exports.NamedShortcut || (exports.NamedShortcut = {}));

var EMPTY_ARRAY = [];

/**
 * The error codes for errors used throughout the codebase.
 *
 * @remarks
 *
 * They can be removed but should never be changed since they are also used to
 * reference the errors within search engines.
 */
exports.ErrorConstant = void 0;

(function (ErrorConstant) {
  ErrorConstant["PROD"] = "RMR0000";
  ErrorConstant["UNKNOWN"] = "RMR0001";
  ErrorConstant["INVALID_COMMAND_ARGUMENTS"] = "RMR0002";
  ErrorConstant["CUSTOM"] = "RMR0003";
  ErrorConstant["CORE_HELPERS"] = "RMR0004";
  ErrorConstant["MUTATION"] = "RMR0005";
  ErrorConstant["INTERNAL"] = "RMR0006";
  ErrorConstant["MISSING_REQUIRED_EXTENSION"] = "RMR0007";
  ErrorConstant["MANAGER_PHASE_ERROR"] = "RMR0008";
  ErrorConstant["INVALID_GET_EXTENSION"] = "RMR0010";
  ErrorConstant["INVALID_MANAGER_ARGUMENTS"] = "RMR0011";
  ErrorConstant["SCHEMA"] = "RMR0012";
  ErrorConstant["HELPERS_CALLED_IN_OUTER_SCOPE"] = "RMR0013";
  ErrorConstant["INVALID_MANAGER_EXTENSION"] = "RMR0014";
  ErrorConstant["DUPLICATE_COMMAND_NAMES"] = "RMR0016";
  ErrorConstant["DUPLICATE_HELPER_NAMES"] = "RMR0017";
  ErrorConstant["NON_CHAINABLE_COMMAND"] = "RMR0018";
  ErrorConstant["INVALID_EXTENSION"] = "RMR0019";
  ErrorConstant["INVALID_CONTENT"] = "RMR0021";
  ErrorConstant["INVALID_NAME"] = "RMR0050";
  ErrorConstant["EXTENSION"] = "RMR0100";
  ErrorConstant["EXTENSION_SPEC"] = "RMR0101";
  ErrorConstant["EXTENSION_EXTRA_ATTRIBUTES"] = "RMR0102";
  ErrorConstant["INVALID_SET_EXTENSION_OPTIONS"] = "RMR0103";
  ErrorConstant["REACT_PROVIDER_CONTEXT"] = "RMR0200";
  ErrorConstant["REACT_GET_ROOT_PROPS"] = "RMR0201";
  ErrorConstant["REACT_EDITOR_VIEW"] = "RMR0202";
  ErrorConstant["REACT_CONTROLLED"] = "RMR0203";
  ErrorConstant["REACT_NODE_VIEW"] = "RMR0204";
  ErrorConstant["REACT_GET_CONTEXT"] = "RMR0205";
  ErrorConstant["REACT_COMPONENTS"] = "RMR0206";
  ErrorConstant["REACT_HOOKS"] = "RMR0207";
  ErrorConstant["I18N_CONTEXT"] = "RMR0300";
})(exports.ErrorConstant || (exports.ErrorConstant = {}));

exports.EMPTY_ARRAY = EMPTY_ARRAY;
exports.EMPTY_NODE = EMPTY_NODE;
exports.EMPTY_PARAGRAPH_NODE = EMPTY_PARAGRAPH_NODE;
exports.ExtensionTag = ExtensionTag;
exports.LEAF_NODE_REPLACING_CHARACTER = LEAF_NODE_REPLACING_CHARACTER;
exports.NON_BREAKING_SPACE_CHAR = NON_BREAKING_SPACE_CHAR;
exports.NULL_CHARACTER = NULL_CHARACTER;
exports.REMIRROR_WEBVIEW_NAME = REMIRROR_WEBVIEW_NAME;
exports.SELECTED_NODE_CLASS_NAME = SELECTED_NODE_CLASS_NAME;
exports.SELECTED_NODE_CLASS_SELECTOR = SELECTED_NODE_CLASS_SELECTOR;
exports.STATE_OVERRIDE = STATE_OVERRIDE;
exports.ZERO_WIDTH_SPACE_CHAR = ZERO_WIDTH_SPACE_CHAR;
exports.__INTERNAL_REMIRROR_IDENTIFIER_KEY__ = __INTERNAL_REMIRROR_IDENTIFIER_KEY__;
exports.mutateTag = mutateTag;
